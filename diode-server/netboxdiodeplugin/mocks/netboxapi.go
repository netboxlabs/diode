// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	netboxdiodeplugin "github.com/netboxlabs/diode/diode-server/netboxdiodeplugin"
	mock "github.com/stretchr/testify/mock"
)

// NetBoxAPI is an autogenerated mock type for the NetBoxAPI type
type NetBoxAPI struct {
	mock.Mock
}

type NetBoxAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *NetBoxAPI) EXPECT() *NetBoxAPI_Expecter {
	return &NetBoxAPI_Expecter{mock: &_m.Mock}
}

// ApplyChangeSet provides a mock function with given fields: _a0, _a1
func (_m *NetBoxAPI) ApplyChangeSet(_a0 context.Context, _a1 netboxdiodeplugin.ChangeSetRequest) (*netboxdiodeplugin.ChangeSetResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ApplyChangeSet")
	}

	var r0 *netboxdiodeplugin.ChangeSetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, netboxdiodeplugin.ChangeSetRequest) (*netboxdiodeplugin.ChangeSetResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, netboxdiodeplugin.ChangeSetRequest) *netboxdiodeplugin.ChangeSetResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*netboxdiodeplugin.ChangeSetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, netboxdiodeplugin.ChangeSetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetBoxAPI_ApplyChangeSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyChangeSet'
type NetBoxAPI_ApplyChangeSet_Call struct {
	*mock.Call
}

// ApplyChangeSet is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netboxdiodeplugin.ChangeSetRequest
func (_e *NetBoxAPI_Expecter) ApplyChangeSet(_a0 interface{}, _a1 interface{}) *NetBoxAPI_ApplyChangeSet_Call {
	return &NetBoxAPI_ApplyChangeSet_Call{Call: _e.mock.On("ApplyChangeSet", _a0, _a1)}
}

func (_c *NetBoxAPI_ApplyChangeSet_Call) Run(run func(_a0 context.Context, _a1 netboxdiodeplugin.ChangeSetRequest)) *NetBoxAPI_ApplyChangeSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netboxdiodeplugin.ChangeSetRequest))
	})
	return _c
}

func (_c *NetBoxAPI_ApplyChangeSet_Call) Return(_a0 *netboxdiodeplugin.ChangeSetResponse, _a1 error) *NetBoxAPI_ApplyChangeSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetBoxAPI_ApplyChangeSet_Call) RunAndReturn(run func(context.Context, netboxdiodeplugin.ChangeSetRequest) (*netboxdiodeplugin.ChangeSetResponse, error)) *NetBoxAPI_ApplyChangeSet_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveObjectState provides a mock function with given fields: _a0, _a1
func (_m *NetBoxAPI) RetrieveObjectState(_a0 context.Context, _a1 netboxdiodeplugin.RetrieveObjectStateQueryParams) (*netboxdiodeplugin.ObjectState, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveObjectState")
	}

	var r0 *netboxdiodeplugin.ObjectState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, netboxdiodeplugin.RetrieveObjectStateQueryParams) (*netboxdiodeplugin.ObjectState, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, netboxdiodeplugin.RetrieveObjectStateQueryParams) *netboxdiodeplugin.ObjectState); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*netboxdiodeplugin.ObjectState)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, netboxdiodeplugin.RetrieveObjectStateQueryParams) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetBoxAPI_RetrieveObjectState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveObjectState'
type NetBoxAPI_RetrieveObjectState_Call struct {
	*mock.Call
}

// RetrieveObjectState is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 netboxdiodeplugin.RetrieveObjectStateQueryParams
func (_e *NetBoxAPI_Expecter) RetrieveObjectState(_a0 interface{}, _a1 interface{}) *NetBoxAPI_RetrieveObjectState_Call {
	return &NetBoxAPI_RetrieveObjectState_Call{Call: _e.mock.On("RetrieveObjectState", _a0, _a1)}
}

func (_c *NetBoxAPI_RetrieveObjectState_Call) Run(run func(_a0 context.Context, _a1 netboxdiodeplugin.RetrieveObjectStateQueryParams)) *NetBoxAPI_RetrieveObjectState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(netboxdiodeplugin.RetrieveObjectStateQueryParams))
	})
	return _c
}

func (_c *NetBoxAPI_RetrieveObjectState_Call) Return(_a0 *netboxdiodeplugin.ObjectState, _a1 error) *NetBoxAPI_RetrieveObjectState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetBoxAPI_RetrieveObjectState_Call) RunAndReturn(run func(context.Context, netboxdiodeplugin.RetrieveObjectStateQueryParams) (*netboxdiodeplugin.ObjectState, error)) *NetBoxAPI_RetrieveObjectState_Call {
	_c.Call.Return(run)
	return _c
}

// NewNetBoxAPI creates a new instance of NetBoxAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetBoxAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *NetBoxAPI {
	mock := &NetBoxAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
