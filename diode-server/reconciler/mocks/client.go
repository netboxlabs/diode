// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	reconcilerpb "github.com/netboxlabs/diode/diode-server/reconciler/v1/reconcilerpb"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *Client) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Client_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Client_Expecter) Close() *Client_Close_Call {
	return &Client_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Client_Close_Call) Run(run func()) *Client_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Close_Call) Return(_a0 error) *Client_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Close_Call) RunAndReturn(run func() error) *Client_Close_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveIngestionDataSources provides a mock function with given fields: _a0, _a1, _a2
func (_m *Client) RetrieveIngestionDataSources(_a0 context.Context, _a1 *reconcilerpb.RetrieveIngestionDataSourcesRequest, _a2 ...grpc.CallOption) (*reconcilerpb.RetrieveIngestionDataSourcesResponse, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveIngestionDataSources")
	}

	var r0 *reconcilerpb.RetrieveIngestionDataSourcesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *reconcilerpb.RetrieveIngestionDataSourcesRequest, ...grpc.CallOption) (*reconcilerpb.RetrieveIngestionDataSourcesResponse, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *reconcilerpb.RetrieveIngestionDataSourcesRequest, ...grpc.CallOption) *reconcilerpb.RetrieveIngestionDataSourcesResponse); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reconcilerpb.RetrieveIngestionDataSourcesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *reconcilerpb.RetrieveIngestionDataSourcesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_RetrieveIngestionDataSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveIngestionDataSources'
type Client_RetrieveIngestionDataSources_Call struct {
	*mock.Call
}

// RetrieveIngestionDataSources is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *reconcilerpb.RetrieveIngestionDataSourcesRequest
//   - _a2 ...grpc.CallOption
func (_e *Client_Expecter) RetrieveIngestionDataSources(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *Client_RetrieveIngestionDataSources_Call {
	return &Client_RetrieveIngestionDataSources_Call{Call: _e.mock.On("RetrieveIngestionDataSources",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *Client_RetrieveIngestionDataSources_Call) Run(run func(_a0 context.Context, _a1 *reconcilerpb.RetrieveIngestionDataSourcesRequest, _a2 ...grpc.CallOption)) *Client_RetrieveIngestionDataSources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*reconcilerpb.RetrieveIngestionDataSourcesRequest), variadicArgs...)
	})
	return _c
}

func (_c *Client_RetrieveIngestionDataSources_Call) Return(_a0 *reconcilerpb.RetrieveIngestionDataSourcesResponse, _a1 error) *Client_RetrieveIngestionDataSources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_RetrieveIngestionDataSources_Call) RunAndReturn(run func(context.Context, *reconcilerpb.RetrieveIngestionDataSourcesRequest, ...grpc.CallOption) (*reconcilerpb.RetrieveIngestionDataSourcesResponse, error)) *Client_RetrieveIngestionDataSources_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
