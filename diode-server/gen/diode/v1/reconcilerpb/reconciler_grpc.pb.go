// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: diode/v1/reconciler.proto

package reconcilerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReconcilerService_RetrieveIngestionDataSources_FullMethodName = "/diode.v1.ReconcilerService/RetrieveIngestionDataSources"
	ReconcilerService_RetrieveIngestionLogs_FullMethodName        = "/diode.v1.ReconcilerService/RetrieveIngestionLogs"
)

// ReconcilerServiceClient is the client API for ReconcilerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReconcilerServiceClient interface {
	// Retrieves ingestion data sources
	RetrieveIngestionDataSources(ctx context.Context, in *RetrieveIngestionDataSourcesRequest, opts ...grpc.CallOption) (*RetrieveIngestionDataSourcesResponse, error)
	// Retrieves ingestion logs
	RetrieveIngestionLogs(ctx context.Context, in *RetrieveIngestionLogsRequest, opts ...grpc.CallOption) (*RetrieveIngestionLogsResponse, error)
}

type reconcilerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReconcilerServiceClient(cc grpc.ClientConnInterface) ReconcilerServiceClient {
	return &reconcilerServiceClient{cc}
}

func (c *reconcilerServiceClient) RetrieveIngestionDataSources(ctx context.Context, in *RetrieveIngestionDataSourcesRequest, opts ...grpc.CallOption) (*RetrieveIngestionDataSourcesResponse, error) {
	out := new(RetrieveIngestionDataSourcesResponse)
	err := c.cc.Invoke(ctx, ReconcilerService_RetrieveIngestionDataSources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reconcilerServiceClient) RetrieveIngestionLogs(ctx context.Context, in *RetrieveIngestionLogsRequest, opts ...grpc.CallOption) (*RetrieveIngestionLogsResponse, error) {
	out := new(RetrieveIngestionLogsResponse)
	err := c.cc.Invoke(ctx, ReconcilerService_RetrieveIngestionLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReconcilerServiceServer is the server API for ReconcilerService service.
// All implementations must embed UnimplementedReconcilerServiceServer
// for forward compatibility
type ReconcilerServiceServer interface {
	// Retrieves ingestion data sources
	RetrieveIngestionDataSources(context.Context, *RetrieveIngestionDataSourcesRequest) (*RetrieveIngestionDataSourcesResponse, error)
	// Retrieves ingestion logs
	RetrieveIngestionLogs(context.Context, *RetrieveIngestionLogsRequest) (*RetrieveIngestionLogsResponse, error)
	mustEmbedUnimplementedReconcilerServiceServer()
}

// UnimplementedReconcilerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReconcilerServiceServer struct {
}

func (UnimplementedReconcilerServiceServer) RetrieveIngestionDataSources(context.Context, *RetrieveIngestionDataSourcesRequest) (*RetrieveIngestionDataSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveIngestionDataSources not implemented")
}
func (UnimplementedReconcilerServiceServer) RetrieveIngestionLogs(context.Context, *RetrieveIngestionLogsRequest) (*RetrieveIngestionLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveIngestionLogs not implemented")
}
func (UnimplementedReconcilerServiceServer) mustEmbedUnimplementedReconcilerServiceServer() {}

// UnsafeReconcilerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReconcilerServiceServer will
// result in compilation errors.
type UnsafeReconcilerServiceServer interface {
	mustEmbedUnimplementedReconcilerServiceServer()
}

func RegisterReconcilerServiceServer(s grpc.ServiceRegistrar, srv ReconcilerServiceServer) {
	s.RegisterService(&ReconcilerService_ServiceDesc, srv)
}

func _ReconcilerService_RetrieveIngestionDataSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveIngestionDataSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconcilerServiceServer).RetrieveIngestionDataSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReconcilerService_RetrieveIngestionDataSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconcilerServiceServer).RetrieveIngestionDataSources(ctx, req.(*RetrieveIngestionDataSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReconcilerService_RetrieveIngestionLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveIngestionLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconcilerServiceServer).RetrieveIngestionLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReconcilerService_RetrieveIngestionLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconcilerServiceServer).RetrieveIngestionLogs(ctx, req.(*RetrieveIngestionLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReconcilerService_ServiceDesc is the grpc.ServiceDesc for ReconcilerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReconcilerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diode.v1.ReconcilerService",
	HandlerType: (*ReconcilerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveIngestionDataSources",
			Handler:    _ReconcilerService_RetrieveIngestionDataSources_Handler,
		},
		{
			MethodName: "RetrieveIngestionLogs",
			Handler:    _ReconcilerService_RetrieveIngestionLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diode/v1/reconciler.proto",
}
