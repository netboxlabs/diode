// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: diode/v1/reconciler.proto

package reconcilerpb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	diodepb "github.com/netboxlabs/diode/diode-server/gen/diode/v1/diodepb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type State int32

const (
	State_UNSPECIFIED State = 0
	State_NEW         State = 1
	State_RECONCILED  State = 2
	State_FAILED      State = 3
	State_NO_CHANGES  State = 4
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NEW",
		2: "RECONCILED",
		3: "FAILED",
		4: "NO_CHANGES",
	}
	State_value = map[string]int32{
		"UNSPECIFIED": 0,
		"NEW":         1,
		"RECONCILED":  2,
		"FAILED":      3,
		"NO_CHANGES":  4,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_diode_v1_reconciler_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_diode_v1_reconciler_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_diode_v1_reconciler_proto_rawDescGZIP(), []int{0}
}

// An ingestion data source
type IngestionDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *IngestionDataSource) Reset() {
	*x = IngestionDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_reconciler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestionDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionDataSource) ProtoMessage() {}

func (x *IngestionDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_reconciler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionDataSource.ProtoReflect.Descriptor instead.
func (*IngestionDataSource) Descriptor() ([]byte, []int) {
	return file_diode_v1_reconciler_proto_rawDescGZIP(), []int{0}
}

func (x *IngestionDataSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IngestionDataSource) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

// The request to retrieve ingestion data sources
type RetrieveIngestionDataSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SdkName    string `protobuf:"bytes,2,opt,name=sdk_name,json=sdkName,proto3" json:"sdk_name,omitempty"`
	SdkVersion string `protobuf:"bytes,3,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
}

func (x *RetrieveIngestionDataSourcesRequest) Reset() {
	*x = RetrieveIngestionDataSourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_reconciler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveIngestionDataSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveIngestionDataSourcesRequest) ProtoMessage() {}

func (x *RetrieveIngestionDataSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_reconciler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveIngestionDataSourcesRequest.ProtoReflect.Descriptor instead.
func (*RetrieveIngestionDataSourcesRequest) Descriptor() ([]byte, []int) {
	return file_diode_v1_reconciler_proto_rawDescGZIP(), []int{1}
}

func (x *RetrieveIngestionDataSourcesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RetrieveIngestionDataSourcesRequest) GetSdkName() string {
	if x != nil {
		return x.SdkName
	}
	return ""
}

func (x *RetrieveIngestionDataSourcesRequest) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

// The response from the retrieve ingestion data sources request
type RetrieveIngestionDataSourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngestionDataSources []*IngestionDataSource `protobuf:"bytes,1,rep,name=ingestion_data_sources,json=ingestionDataSources,proto3" json:"ingestion_data_sources,omitempty"`
}

func (x *RetrieveIngestionDataSourcesResponse) Reset() {
	*x = RetrieveIngestionDataSourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_reconciler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveIngestionDataSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveIngestionDataSourcesResponse) ProtoMessage() {}

func (x *RetrieveIngestionDataSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_reconciler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveIngestionDataSourcesResponse.ProtoReflect.Descriptor instead.
func (*RetrieveIngestionDataSourcesResponse) Descriptor() ([]byte, []int) {
	return file_diode_v1_reconciler_proto_rawDescGZIP(), []int{2}
}

func (x *RetrieveIngestionDataSourcesResponse) GetIngestionDataSources() []*IngestionDataSource {
	if x != nil {
		return x.IngestionDataSources
	}
	return nil
}

// IngestionError represents an error occurring while processing an ingestion entity
type IngestionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                  `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    int32                   `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Details *IngestionError_Details `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *IngestionError) Reset() {
	*x = IngestionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_reconciler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionError) ProtoMessage() {}

func (x *IngestionError) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_reconciler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionError.ProtoReflect.Descriptor instead.
func (*IngestionError) Descriptor() ([]byte, []int) {
	return file_diode_v1_reconciler_proto_rawDescGZIP(), []int{3}
}

func (x *IngestionError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *IngestionError) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *IngestionError) GetDetails() *IngestionError_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

// An ingestion log
type IngestionLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataType           string          `protobuf:"bytes,1,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	State              State           `protobuf:"varint,2,opt,name=state,proto3,enum=diode.v1.State" json:"state,omitempty"`
	RequestId          string          `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	IngestionTs        int64           `protobuf:"varint,4,opt,name=ingestion_ts,json=ingestionTs,proto3" json:"ingestion_ts,omitempty"`
	ProducerAppName    string          `protobuf:"bytes,5,opt,name=producer_app_name,json=producerAppName,proto3" json:"producer_app_name,omitempty"`
	ProducerAppVersion string          `protobuf:"bytes,6,opt,name=producer_app_version,json=producerAppVersion,proto3" json:"producer_app_version,omitempty"`
	SdkName            string          `protobuf:"bytes,7,opt,name=sdk_name,json=sdkName,proto3" json:"sdk_name,omitempty"`
	SdkVersion         string          `protobuf:"bytes,8,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
	Entity             *diodepb.Entity `protobuf:"bytes,9,opt,name=entity,proto3" json:"entity,omitempty"`
	Error              *IngestionError `protobuf:"bytes,10,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *IngestionLog) Reset() {
	*x = IngestionLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_reconciler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestionLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionLog) ProtoMessage() {}

func (x *IngestionLog) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_reconciler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionLog.ProtoReflect.Descriptor instead.
func (*IngestionLog) Descriptor() ([]byte, []int) {
	return file_diode_v1_reconciler_proto_rawDescGZIP(), []int{4}
}

func (x *IngestionLog) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *IngestionLog) GetState() State {
	if x != nil {
		return x.State
	}
	return State_UNSPECIFIED
}

func (x *IngestionLog) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *IngestionLog) GetIngestionTs() int64 {
	if x != nil {
		return x.IngestionTs
	}
	return 0
}

func (x *IngestionLog) GetProducerAppName() string {
	if x != nil {
		return x.ProducerAppName
	}
	return ""
}

func (x *IngestionLog) GetProducerAppVersion() string {
	if x != nil {
		return x.ProducerAppVersion
	}
	return ""
}

func (x *IngestionLog) GetSdkName() string {
	if x != nil {
		return x.SdkName
	}
	return ""
}

func (x *IngestionLog) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *IngestionLog) GetEntity() *diodepb.Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *IngestionLog) GetError() *IngestionError {
	if x != nil {
		return x.Error
	}
	return nil
}

// The request to retrieve ingestion logs
type RetrieveIngestionLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize         int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                           // Number of logs per page, default is 100
	State            *State `protobuf:"varint,2,opt,name=state,proto3,enum=diode.v1.State,oneof" json:"state,omitempty"`                       // Optional filter by state field
	DataType         string `protobuf:"bytes,3,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`                            // Optional filter by data type field
	RequestId        string `protobuf:"bytes,4,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`                         // Optional filter by request ID
	IngestionTsStart int64  `protobuf:"varint,5,opt,name=ingestion_ts_start,json=ingestionTsStart,proto3" json:"ingestion_ts_start,omitempty"` // Optional start of ingestion timestamp range
	IngestionTsEnd   int64  `protobuf:"varint,6,opt,name=ingestion_ts_end,json=ingestionTsEnd,proto3" json:"ingestion_ts_end,omitempty"`       // Optional end of ingestion timestamp range
	PageToken        string `protobuf:"bytes,7,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`                         // Token to fetch the next page of results
}

func (x *RetrieveIngestionLogsRequest) Reset() {
	*x = RetrieveIngestionLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_reconciler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveIngestionLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveIngestionLogsRequest) ProtoMessage() {}

func (x *RetrieveIngestionLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_reconciler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveIngestionLogsRequest.ProtoReflect.Descriptor instead.
func (*RetrieveIngestionLogsRequest) Descriptor() ([]byte, []int) {
	return file_diode_v1_reconciler_proto_rawDescGZIP(), []int{5}
}

func (x *RetrieveIngestionLogsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RetrieveIngestionLogsRequest) GetState() State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return State_UNSPECIFIED
}

func (x *RetrieveIngestionLogsRequest) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *RetrieveIngestionLogsRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RetrieveIngestionLogsRequest) GetIngestionTsStart() int64 {
	if x != nil {
		return x.IngestionTsStart
	}
	return 0
}

func (x *RetrieveIngestionLogsRequest) GetIngestionTsEnd() int64 {
	if x != nil {
		return x.IngestionTsEnd
	}
	return 0
}

func (x *RetrieveIngestionLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

// The response from the retrieve ingestion logs request
type RetrieveIngestionLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs          []*IngestionLog `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`                                          // List of ingestion logs
	NextPageToken string          `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"` // Token for the next page of results, if any
}

func (x *RetrieveIngestionLogsResponse) Reset() {
	*x = RetrieveIngestionLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_reconciler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveIngestionLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveIngestionLogsResponse) ProtoMessage() {}

func (x *RetrieveIngestionLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_reconciler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveIngestionLogsResponse.ProtoReflect.Descriptor instead.
func (*RetrieveIngestionLogsResponse) Descriptor() ([]byte, []int) {
	return file_diode_v1_reconciler_proto_rawDescGZIP(), []int{6}
}

func (x *RetrieveIngestionLogsResponse) GetLogs() []*IngestionLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *RetrieveIngestionLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type IngestionError_Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChangeSetId string                          `protobuf:"bytes,1,opt,name=change_set_id,json=changeSetId,proto3" json:"change_set_id,omitempty"`
	Result      string                          `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Errors      []*IngestionError_Details_Error `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *IngestionError_Details) Reset() {
	*x = IngestionError_Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_reconciler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestionError_Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionError_Details) ProtoMessage() {}

func (x *IngestionError_Details) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_reconciler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionError_Details.ProtoReflect.Descriptor instead.
func (*IngestionError_Details) Descriptor() ([]byte, []int) {
	return file_diode_v1_reconciler_proto_rawDescGZIP(), []int{3, 0}
}

func (x *IngestionError_Details) GetChangeSetId() string {
	if x != nil {
		return x.ChangeSetId
	}
	return ""
}

func (x *IngestionError_Details) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *IngestionError_Details) GetErrors() []*IngestionError_Details_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type IngestionError_Details_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error    string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"` //key value pair of the error
	ChangeId string `protobuf:"bytes,2,opt,name=change_id,json=changeId,proto3" json:"change_id,omitempty"`
}

func (x *IngestionError_Details_Error) Reset() {
	*x = IngestionError_Details_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_reconciler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestionError_Details_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestionError_Details_Error) ProtoMessage() {}

func (x *IngestionError_Details_Error) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_reconciler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestionError_Details_Error.ProtoReflect.Descriptor instead.
func (*IngestionError_Details_Error) Descriptor() ([]byte, []int) {
	return file_diode_v1_reconciler_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *IngestionError_Details_Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *IngestionError_Details_Error) GetChangeId() string {
	if x != nil {
		return x.ChangeId
	}
	return ""
}

var File_diode_v1_reconciler_proto protoreflect.FileDescriptor

var file_diode_v1_reconciler_proto_rawDesc = []byte{
	0x0a, 0x19, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6e,
	0x63, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64, 0x69, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x17, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a, 0x13, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x28, 0x18, 0x28, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x22, 0xab, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xff, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x64,
	0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x07, 0x73, 0x64, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xfa, 0x42, 0x19, 0x72, 0x17, 0x32, 0x15, 0x5e,
	0x28, 0x5c, 0x64, 0x29, 0x2b, 0x5c, 0x2e, 0x28, 0x5c, 0x64, 0x29, 0x2b, 0x5c, 0x2e, 0x28, 0x5c,
	0x64, 0x29, 0x2b, 0x24, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x7b, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x16, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xbe, 0x02,
	0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xc1, 0x01, 0x0a, 0x07, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x1a, 0x3a, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x22, 0x88,
	0x03, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x64, 0x69,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x70,
	0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x64, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x64, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb0, 0x02, 0x0a, 0x1c, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0xfa,
	0x42, 0x07, 0x1a, 0x05, 0x18, 0xe8, 0x07, 0x28, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x67,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x73,
	0x45, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x73, 0x0a, 0x1d,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x69,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x2a, 0x4d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x45, 0x57, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x10, 0x04,
	0x32, 0xfe, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7f, 0x0a, 0x1c, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73,
	0x12, 0x26, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x49, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0xa4, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6e, 0x65, 0x74, 0x62, 0x6f, 0x78, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x64, 0x69, 0x6f,
	0x64, 0x65, 0x2f, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x72, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa,
	0x02, 0x08, 0x44, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x44, 0x69, 0x6f,
	0x64, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x14, 0x44, 0x69, 0x6f, 0x64, 0x65, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x44,
	0x69, 0x6f, 0x64, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diode_v1_reconciler_proto_rawDescOnce sync.Once
	file_diode_v1_reconciler_proto_rawDescData = file_diode_v1_reconciler_proto_rawDesc
)

func file_diode_v1_reconciler_proto_rawDescGZIP() []byte {
	file_diode_v1_reconciler_proto_rawDescOnce.Do(func() {
		file_diode_v1_reconciler_proto_rawDescData = protoimpl.X.CompressGZIP(file_diode_v1_reconciler_proto_rawDescData)
	})
	return file_diode_v1_reconciler_proto_rawDescData
}

var file_diode_v1_reconciler_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_diode_v1_reconciler_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_diode_v1_reconciler_proto_goTypes = []any{
	(State)(0),                  // 0: diode.v1.State
	(*IngestionDataSource)(nil), // 1: diode.v1.IngestionDataSource
	(*RetrieveIngestionDataSourcesRequest)(nil),  // 2: diode.v1.RetrieveIngestionDataSourcesRequest
	(*RetrieveIngestionDataSourcesResponse)(nil), // 3: diode.v1.RetrieveIngestionDataSourcesResponse
	(*IngestionError)(nil),                       // 4: diode.v1.IngestionError
	(*IngestionLog)(nil),                         // 5: diode.v1.IngestionLog
	(*RetrieveIngestionLogsRequest)(nil),         // 6: diode.v1.RetrieveIngestionLogsRequest
	(*RetrieveIngestionLogsResponse)(nil),        // 7: diode.v1.RetrieveIngestionLogsResponse
	(*IngestionError_Details)(nil),               // 8: diode.v1.IngestionError.Details
	(*IngestionError_Details_Error)(nil),         // 9: diode.v1.IngestionError.Details.Error
	(*diodepb.Entity)(nil),                       // 10: diode.v1.Entity
}
var file_diode_v1_reconciler_proto_depIdxs = []int32{
	1,  // 0: diode.v1.RetrieveIngestionDataSourcesResponse.ingestion_data_sources:type_name -> diode.v1.IngestionDataSource
	8,  // 1: diode.v1.IngestionError.details:type_name -> diode.v1.IngestionError.Details
	0,  // 2: diode.v1.IngestionLog.state:type_name -> diode.v1.State
	10, // 3: diode.v1.IngestionLog.entity:type_name -> diode.v1.Entity
	4,  // 4: diode.v1.IngestionLog.error:type_name -> diode.v1.IngestionError
	0,  // 5: diode.v1.RetrieveIngestionLogsRequest.state:type_name -> diode.v1.State
	5,  // 6: diode.v1.RetrieveIngestionLogsResponse.logs:type_name -> diode.v1.IngestionLog
	9,  // 7: diode.v1.IngestionError.Details.errors:type_name -> diode.v1.IngestionError.Details.Error
	2,  // 8: diode.v1.ReconcilerService.RetrieveIngestionDataSources:input_type -> diode.v1.RetrieveIngestionDataSourcesRequest
	6,  // 9: diode.v1.ReconcilerService.RetrieveIngestionLogs:input_type -> diode.v1.RetrieveIngestionLogsRequest
	3,  // 10: diode.v1.ReconcilerService.RetrieveIngestionDataSources:output_type -> diode.v1.RetrieveIngestionDataSourcesResponse
	7,  // 11: diode.v1.ReconcilerService.RetrieveIngestionLogs:output_type -> diode.v1.RetrieveIngestionLogsResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_diode_v1_reconciler_proto_init() }
func file_diode_v1_reconciler_proto_init() {
	if File_diode_v1_reconciler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_diode_v1_reconciler_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*IngestionDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_reconciler_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RetrieveIngestionDataSourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_reconciler_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RetrieveIngestionDataSourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_reconciler_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*IngestionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_reconciler_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*IngestionLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_reconciler_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RetrieveIngestionLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_reconciler_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RetrieveIngestionLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_reconciler_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*IngestionError_Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_reconciler_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*IngestionError_Details_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_diode_v1_reconciler_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diode_v1_reconciler_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_diode_v1_reconciler_proto_goTypes,
		DependencyIndexes: file_diode_v1_reconciler_proto_depIdxs,
		EnumInfos:         file_diode_v1_reconciler_proto_enumTypes,
		MessageInfos:      file_diode_v1_reconciler_proto_msgTypes,
	}.Build()
	File_diode_v1_reconciler_proto = out.File
	file_diode_v1_reconciler_proto_rawDesc = nil
	file_diode_v1_reconciler_proto_goTypes = nil
	file_diode_v1_reconciler_proto_depIdxs = nil
}
