// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: diode/v1/ingester.proto

package diodepb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A device
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DeviceFqdn  *string     `protobuf:"bytes,2,opt,name=device_fqdn,json=deviceFqdn,proto3,oneof" json:"device_fqdn,omitempty"`
	DeviceType  *DeviceType `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	Role        *Role       `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	Platform    *Platform   `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	Serial      *string     `protobuf:"bytes,6,opt,name=serial,proto3,oneof" json:"serial,omitempty"`
	Site        *Site       `protobuf:"bytes,7,opt,name=site,proto3" json:"site,omitempty"`
	AssetTag    *string     `protobuf:"bytes,8,opt,name=asset_tag,json=assetTag,proto3,oneof" json:"asset_tag,omitempty"`
	Status      string      `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	Description *string     `protobuf:"bytes,10,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Comments    *string     `protobuf:"bytes,11,opt,name=comments,proto3,oneof" json:"comments,omitempty"`
	Tags        []*Tag      `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	PrimaryIp4  *IPAddress  `protobuf:"bytes,13,opt,name=primary_ip4,json=primaryIp4,proto3" json:"primary_ip4,omitempty"`
	PrimaryIp6  *IPAddress  `protobuf:"bytes,14,opt,name=primary_ip6,json=primaryIp6,proto3" json:"primary_ip6,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{0}
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetDeviceFqdn() string {
	if x != nil && x.DeviceFqdn != nil {
		return *x.DeviceFqdn
	}
	return ""
}

func (x *Device) GetDeviceType() *DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return nil
}

func (x *Device) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *Device) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *Device) GetSerial() string {
	if x != nil && x.Serial != nil {
		return *x.Serial
	}
	return ""
}

func (x *Device) GetSite() *Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Device) GetAssetTag() string {
	if x != nil && x.AssetTag != nil {
		return *x.AssetTag
	}
	return ""
}

func (x *Device) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Device) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Device) GetComments() string {
	if x != nil && x.Comments != nil {
		return *x.Comments
	}
	return ""
}

func (x *Device) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Device) GetPrimaryIp4() *IPAddress {
	if x != nil {
		return x.PrimaryIp4
	}
	return nil
}

func (x *Device) GetPrimaryIp6() *IPAddress {
	if x != nil {
		return x.PrimaryIp6
	}
	return nil
}

// An interface
type Interface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device        *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Name          string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Label         *string `protobuf:"bytes,3,opt,name=label,proto3,oneof" json:"label,omitempty"`
	Type          string  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Enabled       *bool   `protobuf:"varint,5,opt,name=enabled,proto3,oneof" json:"enabled,omitempty"`
	Mtu           *int32  `protobuf:"varint,6,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
	MacAddress    *string `protobuf:"bytes,7,opt,name=mac_address,json=macAddress,proto3,oneof" json:"mac_address,omitempty"`
	Speed         *int32  `protobuf:"varint,8,opt,name=speed,proto3,oneof" json:"speed,omitempty"`
	Wwn           *string `protobuf:"bytes,9,opt,name=wwn,proto3,oneof" json:"wwn,omitempty"`
	MgmtOnly      *bool   `protobuf:"varint,10,opt,name=mgmt_only,json=mgmtOnly,proto3,oneof" json:"mgmt_only,omitempty"`
	Description   *string `protobuf:"bytes,11,opt,name=description,proto3,oneof" json:"description,omitempty"`
	MarkConnected *bool   `protobuf:"varint,12,opt,name=mark_connected,json=markConnected,proto3,oneof" json:"mark_connected,omitempty"`
	Mode          string  `protobuf:"bytes,13,opt,name=mode,proto3" json:"mode,omitempty"`
	Tags          []*Tag  `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Interface) Reset() {
	*x = Interface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Interface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Interface) ProtoMessage() {}

func (x *Interface) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Interface.ProtoReflect.Descriptor instead.
func (*Interface) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{1}
}

func (x *Interface) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Interface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Interface) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *Interface) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Interface) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Interface) GetMtu() int32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

func (x *Interface) GetMacAddress() string {
	if x != nil && x.MacAddress != nil {
		return *x.MacAddress
	}
	return ""
}

func (x *Interface) GetSpeed() int32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *Interface) GetWwn() string {
	if x != nil && x.Wwn != nil {
		return *x.Wwn
	}
	return ""
}

func (x *Interface) GetMgmtOnly() bool {
	if x != nil && x.MgmtOnly != nil {
		return *x.MgmtOnly
	}
	return false
}

func (x *Interface) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Interface) GetMarkConnected() bool {
	if x != nil && x.MarkConnected != nil {
		return *x.MarkConnected
	}
	return false
}

func (x *Interface) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Interface) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// An IP address.
type IPAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Types that are assignable to AssignedObject:
	//
	//	*IPAddress_Interface
	AssignedObject isIPAddress_AssignedObject `protobuf_oneof:"assigned_object"`
	Status         string                     `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Role           string                     `protobuf:"bytes,4,opt,name=role,proto3" json:"role,omitempty"`
	DnsName        *string                    `protobuf:"bytes,5,opt,name=dns_name,json=dnsName,proto3,oneof" json:"dns_name,omitempty"`
	Description    *string                    `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Comments       *string                    `protobuf:"bytes,7,opt,name=comments,proto3,oneof" json:"comments,omitempty"`
	Tags           []*Tag                     `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *IPAddress) Reset() {
	*x = IPAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAddress) ProtoMessage() {}

func (x *IPAddress) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAddress.ProtoReflect.Descriptor instead.
func (*IPAddress) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{2}
}

func (x *IPAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (m *IPAddress) GetAssignedObject() isIPAddress_AssignedObject {
	if m != nil {
		return m.AssignedObject
	}
	return nil
}

func (x *IPAddress) GetInterface() *Interface {
	if x, ok := x.GetAssignedObject().(*IPAddress_Interface); ok {
		return x.Interface
	}
	return nil
}

func (x *IPAddress) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *IPAddress) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *IPAddress) GetDnsName() string {
	if x != nil && x.DnsName != nil {
		return *x.DnsName
	}
	return ""
}

func (x *IPAddress) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *IPAddress) GetComments() string {
	if x != nil && x.Comments != nil {
		return *x.Comments
	}
	return ""
}

func (x *IPAddress) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

type isIPAddress_AssignedObject interface {
	isIPAddress_AssignedObject()
}

type IPAddress_Interface struct {
	Interface *Interface `protobuf:"bytes,2,opt,name=interface,proto3,oneof"`
}

func (*IPAddress_Interface) isIPAddress_AssignedObject() {}

// A device type
type DeviceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model        string        `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	Slug         string        `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Manufacturer *Manufacturer `protobuf:"bytes,3,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Description  *string       `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Comments     *string       `protobuf:"bytes,5,opt,name=comments,proto3,oneof" json:"comments,omitempty"`
	PartNumber   *string       `protobuf:"bytes,6,opt,name=part_number,json=partNumber,proto3,oneof" json:"part_number,omitempty"`
	Tags         []*Tag        `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DeviceType) Reset() {
	*x = DeviceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceType) ProtoMessage() {}

func (x *DeviceType) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceType.ProtoReflect.Descriptor instead.
func (*DeviceType) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceType) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DeviceType) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *DeviceType) GetManufacturer() *Manufacturer {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *DeviceType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *DeviceType) GetComments() string {
	if x != nil && x.Comments != nil {
		return *x.Comments
	}
	return ""
}

func (x *DeviceType) GetPartNumber() string {
	if x != nil && x.PartNumber != nil {
		return *x.PartNumber
	}
	return ""
}

func (x *DeviceType) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// A manufacturer
type Manufacturer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Slug        string  `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Description *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Tags        []*Tag  `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Manufacturer) Reset() {
	*x = Manufacturer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Manufacturer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manufacturer) ProtoMessage() {}

func (x *Manufacturer) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manufacturer.ProtoReflect.Descriptor instead.
func (*Manufacturer) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{4}
}

func (x *Manufacturer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Manufacturer) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Manufacturer) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Manufacturer) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// A platform
type Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Slug         string        `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Manufacturer *Manufacturer `protobuf:"bytes,3,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	Description  *string       `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Tags         []*Tag        `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Platform) Reset() {
	*x = Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform) ProtoMessage() {}

func (x *Platform) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform.ProtoReflect.Descriptor instead.
func (*Platform) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{5}
}

func (x *Platform) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Platform) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Platform) GetManufacturer() *Manufacturer {
	if x != nil {
		return x.Manufacturer
	}
	return nil
}

func (x *Platform) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Platform) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// An IPAM prefix.
type Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix       string  `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Site         *Site   `protobuf:"bytes,2,opt,name=site,proto3" json:"site,omitempty"`
	Status       string  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	IsPool       *bool   `protobuf:"varint,4,opt,name=is_pool,json=isPool,proto3,oneof" json:"is_pool,omitempty"`
	MarkUtilized *bool   `protobuf:"varint,5,opt,name=mark_utilized,json=markUtilized,proto3,oneof" json:"mark_utilized,omitempty"`
	Description  *string `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Comments     *string `protobuf:"bytes,7,opt,name=comments,proto3,oneof" json:"comments,omitempty"`
	Tags         []*Tag  `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Prefix) Reset() {
	*x = Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prefix) ProtoMessage() {}

func (x *Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prefix.ProtoReflect.Descriptor instead.
func (*Prefix) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{6}
}

func (x *Prefix) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Prefix) GetSite() *Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Prefix) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Prefix) GetIsPool() bool {
	if x != nil && x.IsPool != nil {
		return *x.IsPool
	}
	return false
}

func (x *Prefix) GetMarkUtilized() bool {
	if x != nil && x.MarkUtilized != nil {
		return *x.MarkUtilized
	}
	return false
}

func (x *Prefix) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Prefix) GetComments() string {
	if x != nil && x.Comments != nil {
		return *x.Comments
	}
	return ""
}

func (x *Prefix) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// A role
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Slug        string  `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Color       string  `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
	Description *string `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Tags        []*Tag  `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{7}
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Role) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Role) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Role) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// A site
type Site struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Slug        string  `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Status      string  `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Facility    *string `protobuf:"bytes,4,opt,name=facility,proto3,oneof" json:"facility,omitempty"`
	TimeZone    *string `protobuf:"bytes,5,opt,name=time_zone,json=timeZone,proto3,oneof" json:"time_zone,omitempty"`
	Description *string `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Comments    *string `protobuf:"bytes,7,opt,name=comments,proto3,oneof" json:"comments,omitempty"`
	Tags        []*Tag  `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *Site) Reset() {
	*x = Site{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site) ProtoMessage() {}

func (x *Site) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site.ProtoReflect.Descriptor instead.
func (*Site) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{8}
}

func (x *Site) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Site) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Site) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Site) GetFacility() string {
	if x != nil && x.Facility != nil {
		return *x.Facility
	}
	return ""
}

func (x *Site) GetTimeZone() string {
	if x != nil && x.TimeZone != nil {
		return *x.TimeZone
	}
	return ""
}

func (x *Site) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Site) GetComments() string {
	if x != nil && x.Comments != nil {
		return *x.Comments
	}
	return ""
}

func (x *Site) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// A tag
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Slug  string `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Color string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{9}
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Tag) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

// An ingest entity wrapper
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entity:
	//
	//	*Entity_Site
	//	*Entity_Platform
	//	*Entity_Manufacturer
	//	*Entity_Device
	//	*Entity_DeviceRole
	//	*Entity_DeviceType
	//	*Entity_Interface
	//	*Entity_IpAddress
	//	*Entity_Prefix
	Entity isEntity_Entity `protobuf_oneof:"entity"`
	// The timestamp of the data discovery at source
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{10}
}

func (m *Entity) GetEntity() isEntity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (x *Entity) GetSite() *Site {
	if x, ok := x.GetEntity().(*Entity_Site); ok {
		return x.Site
	}
	return nil
}

func (x *Entity) GetPlatform() *Platform {
	if x, ok := x.GetEntity().(*Entity_Platform); ok {
		return x.Platform
	}
	return nil
}

func (x *Entity) GetManufacturer() *Manufacturer {
	if x, ok := x.GetEntity().(*Entity_Manufacturer); ok {
		return x.Manufacturer
	}
	return nil
}

func (x *Entity) GetDevice() *Device {
	if x, ok := x.GetEntity().(*Entity_Device); ok {
		return x.Device
	}
	return nil
}

func (x *Entity) GetDeviceRole() *Role {
	if x, ok := x.GetEntity().(*Entity_DeviceRole); ok {
		return x.DeviceRole
	}
	return nil
}

func (x *Entity) GetDeviceType() *DeviceType {
	if x, ok := x.GetEntity().(*Entity_DeviceType); ok {
		return x.DeviceType
	}
	return nil
}

func (x *Entity) GetInterface() *Interface {
	if x, ok := x.GetEntity().(*Entity_Interface); ok {
		return x.Interface
	}
	return nil
}

func (x *Entity) GetIpAddress() *IPAddress {
	if x, ok := x.GetEntity().(*Entity_IpAddress); ok {
		return x.IpAddress
	}
	return nil
}

func (x *Entity) GetPrefix() *Prefix {
	if x, ok := x.GetEntity().(*Entity_Prefix); ok {
		return x.Prefix
	}
	return nil
}

func (x *Entity) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type isEntity_Entity interface {
	isEntity_Entity()
}

type Entity_Site struct {
	Site *Site `protobuf:"bytes,1,opt,name=site,proto3,oneof"`
}

type Entity_Platform struct {
	Platform *Platform `protobuf:"bytes,2,opt,name=platform,proto3,oneof"`
}

type Entity_Manufacturer struct {
	Manufacturer *Manufacturer `protobuf:"bytes,3,opt,name=manufacturer,proto3,oneof"`
}

type Entity_Device struct {
	Device *Device `protobuf:"bytes,4,opt,name=device,proto3,oneof"`
}

type Entity_DeviceRole struct {
	DeviceRole *Role `protobuf:"bytes,5,opt,name=device_role,json=deviceRole,proto3,oneof"`
}

type Entity_DeviceType struct {
	DeviceType *DeviceType `protobuf:"bytes,6,opt,name=device_type,json=deviceType,proto3,oneof"`
}

type Entity_Interface struct {
	Interface *Interface `protobuf:"bytes,7,opt,name=interface,proto3,oneof"`
}

type Entity_IpAddress struct {
	IpAddress *IPAddress `protobuf:"bytes,9,opt,name=ip_address,json=ipAddress,proto3,oneof"`
}

type Entity_Prefix struct {
	Prefix *Prefix `protobuf:"bytes,10,opt,name=prefix,proto3,oneof"`
}

func (*Entity_Site) isEntity_Entity() {}

func (*Entity_Platform) isEntity_Entity() {}

func (*Entity_Manufacturer) isEntity_Entity() {}

func (*Entity_Device) isEntity_Entity() {}

func (*Entity_DeviceRole) isEntity_Entity() {}

func (*Entity_DeviceType) isEntity_Entity() {}

func (*Entity_Interface) isEntity_Entity() {}

func (*Entity_IpAddress) isEntity_Entity() {}

func (*Entity_Prefix) isEntity_Entity() {}

// The request to ingest the data
type IngestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream             string    `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	Entities           []*Entity `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"`
	Id                 string    `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	ProducerAppName    string    `protobuf:"bytes,4,opt,name=producer_app_name,json=producerAppName,proto3" json:"producer_app_name,omitempty"`
	ProducerAppVersion string    `protobuf:"bytes,5,opt,name=producer_app_version,json=producerAppVersion,proto3" json:"producer_app_version,omitempty"`
	SdkName            string    `protobuf:"bytes,6,opt,name=sdk_name,json=sdkName,proto3" json:"sdk_name,omitempty"`
	SdkVersion         string    `protobuf:"bytes,7,opt,name=sdk_version,json=sdkVersion,proto3" json:"sdk_version,omitempty"`
}

func (x *IngestRequest) Reset() {
	*x = IngestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestRequest) ProtoMessage() {}

func (x *IngestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestRequest.ProtoReflect.Descriptor instead.
func (*IngestRequest) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{11}
}

func (x *IngestRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *IngestRequest) GetEntities() []*Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *IngestRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IngestRequest) GetProducerAppName() string {
	if x != nil {
		return x.ProducerAppName
	}
	return ""
}

func (x *IngestRequest) GetProducerAppVersion() string {
	if x != nil {
		return x.ProducerAppVersion
	}
	return ""
}

func (x *IngestRequest) GetSdkName() string {
	if x != nil {
		return x.SdkName
	}
	return ""
}

func (x *IngestRequest) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

// The response from the ingest request
type IngestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *IngestResponse) Reset() {
	*x = IngestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diode_v1_ingester_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngestResponse) ProtoMessage() {}

func (x *IngestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diode_v1_ingester_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngestResponse.ProtoReflect.Descriptor instead.
func (*IngestResponse) Descriptor() ([]byte, []int) {
	return file_diode_v1_ingester_proto_rawDescGZIP(), []int{12}
}

func (x *IngestResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_diode_v1_ingester_proto protoreflect.FileDescriptor

var file_diode_v1_ingester_proto_rawDesc = []byte{
	0x0a, 0x17, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64, 0x69, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x05,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x66, 0x71, 0x64, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x71, 0x64, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64,
	0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64,
	0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x01, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x02, 0x52, 0x08, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4b, 0xfa, 0x42, 0x48, 0x72, 0x46, 0x52,
	0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65,
	0x64, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x03, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x70,
	0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x70, 0x34, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x69, 0x70, 0x36, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x70, 0x36, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xef, 0x11, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x40, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0xfa, 0x0c, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0xe5, 0x0c, 0xfa, 0x42, 0xe1,
	0x0c, 0x72, 0xde, 0x0c, 0x52, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x06, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x52, 0x03, 0x6c, 0x61, 0x67, 0x52, 0x0a, 0x31, 0x30, 0x30, 0x62,
	0x61, 0x73, 0x65, 0x2d, 0x66, 0x78, 0x52, 0x0b, 0x31, 0x30, 0x30, 0x62, 0x61, 0x73, 0x65, 0x2d,
	0x6c, 0x66, 0x78, 0x52, 0x0a, 0x31, 0x30, 0x30, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x74, 0x78, 0x52,
	0x0a, 0x31, 0x30, 0x30, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x74, 0x31, 0x52, 0x0a, 0x31, 0x30, 0x30,
	0x30, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x74, 0x52, 0x0f, 0x31, 0x30, 0x30, 0x30, 0x62, 0x61, 0x73,
	0x65, 0x2d, 0x78, 0x2d, 0x67, 0x62, 0x69, 0x63, 0x52, 0x0e, 0x31, 0x30, 0x30, 0x30, 0x62, 0x61,
	0x73, 0x65, 0x2d, 0x78, 0x2d, 0x73, 0x66, 0x70, 0x52, 0x0a, 0x32, 0x2e, 0x35, 0x67, 0x62, 0x61,
	0x73, 0x65, 0x2d, 0x74, 0x52, 0x08, 0x35, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x74, 0x52, 0x09,
	0x31, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x74, 0x52, 0x0b, 0x31, 0x30, 0x67, 0x62, 0x61,
	0x73, 0x65, 0x2d, 0x63, 0x78, 0x34, 0x52, 0x0e, 0x31, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d,
	0x78, 0x2d, 0x73, 0x66, 0x70, 0x70, 0x52, 0x0d, 0x31, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d,
	0x78, 0x2d, 0x78, 0x66, 0x70, 0x52, 0x10, 0x31, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78,
	0x2d, 0x78, 0x65, 0x6e, 0x70, 0x61, 0x6b, 0x52, 0x0c, 0x31, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65,
	0x2d, 0x78, 0x2d, 0x78, 0x32, 0x52, 0x0f, 0x32, 0x35, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78,
	0x2d, 0x73, 0x66, 0x70, 0x32, 0x38, 0x52, 0x0f, 0x35, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d,
	0x78, 0x2d, 0x73, 0x66, 0x70, 0x35, 0x36, 0x52, 0x0f, 0x34, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65,
	0x2d, 0x78, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x70, 0x52, 0x0f, 0x35, 0x30, 0x67, 0x62, 0x61, 0x73,
	0x65, 0x2d, 0x78, 0x2d, 0x73, 0x66, 0x70, 0x32, 0x38, 0x52, 0x0e, 0x31, 0x30, 0x30, 0x67, 0x62,
	0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x66, 0x70, 0x52, 0x0f, 0x31, 0x30, 0x30, 0x67, 0x62,
	0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x66, 0x70, 0x32, 0x52, 0x0f, 0x31, 0x30, 0x30, 0x67,
	0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x66, 0x70, 0x34, 0x52, 0x0e, 0x31, 0x30, 0x30,
	0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x78, 0x70, 0x52, 0x0f, 0x31, 0x30, 0x30,
	0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x70, 0x61, 0x6b, 0x52, 0x0f, 0x31, 0x30,
	0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x64, 0x73, 0x66, 0x70, 0x52, 0x10, 0x31,
	0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x73, 0x66, 0x70, 0x64, 0x64, 0x52,
	0x11, 0x31, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x71, 0x73, 0x66, 0x70,
	0x32, 0x38, 0x52, 0x11, 0x31, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x71,
	0x73, 0x66, 0x70, 0x64, 0x64, 0x52, 0x0f, 0x32, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d,
	0x78, 0x2d, 0x63, 0x66, 0x70, 0x32, 0x52, 0x11, 0x32, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65,
	0x2d, 0x78, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x35, 0x36, 0x52, 0x11, 0x32, 0x30, 0x30, 0x67, 0x62,
	0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x64, 0x64, 0x52, 0x0f, 0x34, 0x30,
	0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x66, 0x70, 0x32, 0x52, 0x12, 0x34,
	0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x31, 0x31,
	0x32, 0x52, 0x11, 0x34, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x71, 0x73,
	0x66, 0x70, 0x64, 0x64, 0x52, 0x0f, 0x34, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78,
	0x2d, 0x6f, 0x73, 0x66, 0x70, 0x52, 0x13, 0x34, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d,
	0x78, 0x2d, 0x6f, 0x73, 0x66, 0x70, 0x2d, 0x72, 0x68, 0x73, 0x52, 0x0f, 0x34, 0x30, 0x30, 0x67,
	0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x64, 0x66, 0x70, 0x52, 0x0f, 0x34, 0x30, 0x30,
	0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x63, 0x66, 0x70, 0x38, 0x52, 0x11, 0x38, 0x30,
	0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x64, 0x64, 0x52,
	0x0f, 0x38, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x78, 0x2d, 0x6f, 0x73, 0x66, 0x70,
	0x52, 0x0b, 0x31, 0x30, 0x30, 0x30, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x6b, 0x78, 0x52, 0x0a, 0x31,
	0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x6b, 0x72, 0x52, 0x0b, 0x31, 0x30, 0x67, 0x62, 0x61,
	0x73, 0x65, 0x2d, 0x6b, 0x78, 0x34, 0x52, 0x0a, 0x32, 0x35, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d,
	0x6b, 0x72, 0x52, 0x0b, 0x34, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x6b, 0x72, 0x34, 0x52,
	0x0a, 0x35, 0x30, 0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x6b, 0x72, 0x52, 0x0c, 0x31, 0x30, 0x30,
	0x67, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x6b, 0x70, 0x34, 0x52, 0x0c, 0x31, 0x30, 0x30, 0x67, 0x62,
	0x61, 0x73, 0x65, 0x2d, 0x6b, 0x72, 0x32, 0x52, 0x0c, 0x31, 0x30, 0x30, 0x67, 0x62, 0x61, 0x73,
	0x65, 0x2d, 0x6b, 0x72, 0x34, 0x52, 0x0b, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x2e, 0x31,
	0x31, 0x61, 0x52, 0x0b, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x2e, 0x31, 0x31, 0x67, 0x52,
	0x0b, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x2e, 0x31, 0x31, 0x6e, 0x52, 0x0c, 0x69, 0x65,
	0x65, 0x65, 0x38, 0x30, 0x32, 0x2e, 0x31, 0x31, 0x61, 0x63, 0x52, 0x0c, 0x69, 0x65, 0x65, 0x65,
	0x38, 0x30, 0x32, 0x2e, 0x31, 0x31, 0x61, 0x64, 0x52, 0x0c, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30,
	0x32, 0x2e, 0x31, 0x31, 0x61, 0x78, 0x52, 0x0c, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x2e,
	0x31, 0x31, 0x61, 0x79, 0x52, 0x0c, 0x69, 0x65, 0x65, 0x65, 0x38, 0x30, 0x32, 0x2e, 0x31, 0x35,
	0x2e, 0x31, 0x52, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2d, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65,
	0x73, 0x73, 0x52, 0x03, 0x67, 0x73, 0x6d, 0x52, 0x04, 0x63, 0x64, 0x6d, 0x61, 0x52, 0x03, 0x6c,
	0x74, 0x65, 0x52, 0x09, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x6f, 0x63, 0x33, 0x52, 0x0a, 0x73,
	0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x6f, 0x63, 0x31, 0x32, 0x52, 0x0a, 0x73, 0x6f, 0x6e, 0x65, 0x74,
	0x2d, 0x6f, 0x63, 0x34, 0x38, 0x52, 0x0b, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x6f, 0x63, 0x31,
	0x39, 0x32, 0x52, 0x0b, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x6f, 0x63, 0x37, 0x36, 0x38, 0x52,
	0x0c, 0x73, 0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x6f, 0x63, 0x31, 0x39, 0x32, 0x30, 0x52, 0x0c, 0x73,
	0x6f, 0x6e, 0x65, 0x74, 0x2d, 0x6f, 0x63, 0x33, 0x38, 0x34, 0x30, 0x52, 0x08, 0x31, 0x67, 0x66,
	0x63, 0x2d, 0x73, 0x66, 0x70, 0x52, 0x08, 0x32, 0x67, 0x66, 0x63, 0x2d, 0x73, 0x66, 0x70, 0x52,
	0x08, 0x34, 0x67, 0x66, 0x63, 0x2d, 0x73, 0x66, 0x70, 0x52, 0x09, 0x38, 0x67, 0x66, 0x63, 0x2d,
	0x73, 0x66, 0x70, 0x70, 0x52, 0x0a, 0x31, 0x36, 0x67, 0x66, 0x63, 0x2d, 0x73, 0x66, 0x70, 0x70,
	0x52, 0x0b, 0x33, 0x32, 0x67, 0x66, 0x63, 0x2d, 0x73, 0x66, 0x70, 0x32, 0x38, 0x52, 0x0b, 0x36,
	0x34, 0x67, 0x66, 0x63, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x70, 0x52, 0x0d, 0x31, 0x32, 0x38, 0x67,
	0x66, 0x63, 0x2d, 0x71, 0x73, 0x66, 0x70, 0x32, 0x38, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x69, 0x6e,
	0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x73, 0x64, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x69, 0x6e,
	0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x64, 0x64, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x69, 0x6e,
	0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x71, 0x64, 0x72, 0x52, 0x10, 0x69, 0x6e, 0x66, 0x69, 0x6e,
	0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x66, 0x64, 0x72, 0x31, 0x30, 0x52, 0x0e, 0x69, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x66, 0x64, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x65, 0x64, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x68, 0x64, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x6e, 0x64, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x62, 0x61, 0x6e, 0x64, 0x2d, 0x78, 0x64, 0x72, 0x52, 0x02, 0x74, 0x31, 0x52,
	0x02, 0x65, 0x31, 0x52, 0x02, 0x74, 0x33, 0x52, 0x02, 0x65, 0x33, 0x52, 0x04, 0x78, 0x64, 0x73,
	0x6c, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x73, 0x69, 0x73, 0x52, 0x04, 0x67, 0x70, 0x6f, 0x6e, 0x52,
	0x06, 0x78, 0x67, 0x2d, 0x70, 0x6f, 0x6e, 0x52, 0x07, 0x78, 0x67, 0x73, 0x2d, 0x70, 0x6f, 0x6e,
	0x52, 0x07, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6e, 0x32, 0x52, 0x04, 0x65, 0x70, 0x6f, 0x6e, 0x52,
	0x08, 0x31, 0x30, 0x67, 0x2d, 0x65, 0x70, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x69, 0x73, 0x63, 0x6f,
	0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x52, 0x14, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x2d, 0x70, 0x6c, 0x75, 0x73,
	0x52, 0x0f, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x66, 0x6c, 0x65, 0x78, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x52, 0x14, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x66, 0x6c, 0x65, 0x78, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x2d, 0x70, 0x6c, 0x75, 0x73, 0x52, 0x12, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x2d, 0x38, 0x30, 0x52, 0x13, 0x63, 0x69, 0x73,
	0x63, 0x6f, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x2d, 0x31, 0x36, 0x30,
	0x52, 0x13, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x73,
	0x65, 0x2d, 0x33, 0x32, 0x30, 0x52, 0x13, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x2d, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x2d, 0x34, 0x38, 0x30, 0x52, 0x12, 0x63, 0x69, 0x73, 0x63,
	0x6f, 0x2d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x77, 0x69, 0x73, 0x65, 0x2d, 0x31, 0x74, 0x52, 0x0b,
	0x6a, 0x75, 0x6e, 0x69, 0x70, 0x65, 0x72, 0x2d, 0x76, 0x63, 0x70, 0x52, 0x13, 0x65, 0x78, 0x74,
	0x72, 0x65, 0x6d, 0x65, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x52, 0x17, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x31, 0x32, 0x38, 0x52, 0x17, 0x65, 0x78, 0x74, 0x72, 0x65,
	0x6d, 0x65, 0x2d, 0x73, 0x75, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x32,
	0x35, 0x36, 0x52, 0x17, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x65, 0x2d, 0x73, 0x75, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x35, 0x31, 0x32, 0x52, 0x05, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x1a, 0x06, 0x18, 0x80, 0x80, 0x04, 0x28,
	0x01, 0x48, 0x02, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x48, 0x04, 0x52, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x77, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x03, 0x77, 0x77, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x06, 0x52, 0x08, 0x6d, 0x67, 0x6d, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x07, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xfa, 0x42, 0x1e, 0x72, 0x1c,
	0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64,
	0x52, 0x0a, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x2d, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x6d, 0x74, 0x75, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x77, 0x77, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x8c, 0x04, 0x0a, 0x09, 0x49, 0x50, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x70, 0x01, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x69, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xfa, 0x42,
	0x2d, 0x72, 0x2b, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x04, 0x64, 0x68, 0x63, 0x70, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x61, 0x63, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0xfa, 0x42, 0x3d, 0x72, 0x3b, 0x52, 0x08, 0x6c, 0x6f, 0x6f,
	0x70, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x52, 0x07, 0x61, 0x6e, 0x79, 0x63, 0x61, 0x73, 0x74, 0x52, 0x03, 0x76, 0x69, 0x70, 0x52, 0x04,
	0x76, 0x72, 0x72, 0x70, 0x52, 0x04, 0x68, 0x73, 0x72, 0x70, 0x52, 0x04, 0x67, 0x6c, 0x62, 0x70,
	0x52, 0x04, 0x63, 0x61, 0x72, 0x70, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x08,
	0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35,
	0xfa, 0x42, 0x32, 0x72, 0x30, 0x18, 0xff, 0x01, 0x32, 0x2b, 0x5e, 0x28, 0x5b, 0x30, 0x2d, 0x39,
	0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x2b, 0x7c, 0x5c, 0x2a, 0x29, 0x28, 0x5c,
	0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5f, 0x2d, 0x5d, 0x2b, 0x29,
	0x2a, 0x5c, 0x2e, 0x3f, 0x24, 0x48, 0x01, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18,
	0xc8, 0x01, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x64, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x01, 0x18, 0x64, 0x32, 0x10,
	0x5e, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24,
	0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x3a, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64,
	0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8,
	0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x18, 0x32, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x01, 0x18, 0x64, 0x32, 0x10, 0x5e, 0x5b,
	0x2d, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x04,
	0x73, 0x6c, 0x75, 0x67, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x18, 0xc8, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfa, 0x01, 0x0a, 0x08, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10, 0x01, 0x18, 0x64, 0x32, 0x10, 0x5e,
	0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24, 0x52,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x3a, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x69,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01,
	0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x03, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x1f, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x70, 0x01, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52,
	0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xfa, 0x42, 0x2b, 0x72, 0x29, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x06, 0x69, 0x73, 0x50, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x18, 0xc8, 0x01, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69,
	0x73, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18,
	0x72, 0x16, 0x10, 0x01, 0x18, 0x64, 0x32, 0x10, 0x5e, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x2e,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xfa,
	0x42, 0x15, 0x72, 0x13, 0x10, 0x06, 0x18, 0x06, 0x32, 0x0d, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x36, 0x7d, 0x24, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2f,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa2, 0x03, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04,
	0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x10,
	0x01, 0x18, 0x64, 0x32, 0x10, 0x5e, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x51, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0xfa, 0x42, 0x36,
	0x72, 0x34, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x0f, 0x64, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x08, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x32, 0x48, 0x00, 0x52, 0x08, 0x66, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xc8, 0x01, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x69, 0x6f,
	0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12,
	0x1d, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x64, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xfa, 0x42,
	0x18, 0x72, 0x16, 0x10, 0x01, 0x18, 0x64, 0x32, 0x10, 0x5e, 0x5b, 0x2d, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5f, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12,
	0x2e, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18,
	0xfa, 0x42, 0x15, 0x72, 0x13, 0x10, 0x06, 0x18, 0x06, 0x32, 0x0d, 0x5e, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x36, 0x7d, 0x24, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22,
	0x9d, 0x04, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x69,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65,
	0x12, 0x30, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x37, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x69,
	0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x44, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0xb2, 0x01, 0x04, 0x08, 0x01, 0x38, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0xe4, 0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x0b, 0xfa, 0x42, 0x08, 0x92, 0x01,
	0x05, 0x08, 0x01, 0x10, 0xe8, 0x07, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff,
	0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x41, 0x70, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x61,
	0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x08, 0x73, 0x64, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x07,
	0x73, 0x64, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xfa, 0x42,
	0x19, 0x72, 0x17, 0x32, 0x15, 0x5e, 0x28, 0x5c, 0x64, 0x29, 0x2b, 0x5c, 0x2e, 0x28, 0x5c, 0x64,
	0x29, 0x2b, 0x5c, 0x2e, 0x28, 0x5c, 0x64, 0x29, 0x2b, 0x24, 0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x32, 0x50, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x17, 0x2e,
	0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x9d, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x6f, 0x64, 0x65,
	0x2e, 0x76, 0x31, 0x42, 0x0d, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6e, 0x65, 0x74, 0x62, 0x6f, 0x78, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x64, 0x69, 0x6f, 0x64,
	0x65, 0x2f, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x64, 0x69, 0x6f, 0x64, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x6f, 0x64,
	0x65, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x44, 0x69, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x08, 0x44, 0x69, 0x6f, 0x64, 0x65, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x14, 0x44, 0x69, 0x6f, 0x64, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x09, 0x44, 0x69, 0x6f, 0x64, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diode_v1_ingester_proto_rawDescOnce sync.Once
	file_diode_v1_ingester_proto_rawDescData = file_diode_v1_ingester_proto_rawDesc
)

func file_diode_v1_ingester_proto_rawDescGZIP() []byte {
	file_diode_v1_ingester_proto_rawDescOnce.Do(func() {
		file_diode_v1_ingester_proto_rawDescData = protoimpl.X.CompressGZIP(file_diode_v1_ingester_proto_rawDescData)
	})
	return file_diode_v1_ingester_proto_rawDescData
}

var file_diode_v1_ingester_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_diode_v1_ingester_proto_goTypes = []interface{}{
	(*Device)(nil),                // 0: diode.v1.Device
	(*Interface)(nil),             // 1: diode.v1.Interface
	(*IPAddress)(nil),             // 2: diode.v1.IPAddress
	(*DeviceType)(nil),            // 3: diode.v1.DeviceType
	(*Manufacturer)(nil),          // 4: diode.v1.Manufacturer
	(*Platform)(nil),              // 5: diode.v1.Platform
	(*Prefix)(nil),                // 6: diode.v1.Prefix
	(*Role)(nil),                  // 7: diode.v1.Role
	(*Site)(nil),                  // 8: diode.v1.Site
	(*Tag)(nil),                   // 9: diode.v1.Tag
	(*Entity)(nil),                // 10: diode.v1.Entity
	(*IngestRequest)(nil),         // 11: diode.v1.IngestRequest
	(*IngestResponse)(nil),        // 12: diode.v1.IngestResponse
	(*timestamppb.Timestamp)(nil), // 13: google.protobuf.Timestamp
}
var file_diode_v1_ingester_proto_depIdxs = []int32{
	3,  // 0: diode.v1.Device.device_type:type_name -> diode.v1.DeviceType
	7,  // 1: diode.v1.Device.role:type_name -> diode.v1.Role
	5,  // 2: diode.v1.Device.platform:type_name -> diode.v1.Platform
	8,  // 3: diode.v1.Device.site:type_name -> diode.v1.Site
	9,  // 4: diode.v1.Device.tags:type_name -> diode.v1.Tag
	2,  // 5: diode.v1.Device.primary_ip4:type_name -> diode.v1.IPAddress
	2,  // 6: diode.v1.Device.primary_ip6:type_name -> diode.v1.IPAddress
	0,  // 7: diode.v1.Interface.device:type_name -> diode.v1.Device
	9,  // 8: diode.v1.Interface.tags:type_name -> diode.v1.Tag
	1,  // 9: diode.v1.IPAddress.interface:type_name -> diode.v1.Interface
	9,  // 10: diode.v1.IPAddress.tags:type_name -> diode.v1.Tag
	4,  // 11: diode.v1.DeviceType.manufacturer:type_name -> diode.v1.Manufacturer
	9,  // 12: diode.v1.DeviceType.tags:type_name -> diode.v1.Tag
	9,  // 13: diode.v1.Manufacturer.tags:type_name -> diode.v1.Tag
	4,  // 14: diode.v1.Platform.manufacturer:type_name -> diode.v1.Manufacturer
	9,  // 15: diode.v1.Platform.tags:type_name -> diode.v1.Tag
	8,  // 16: diode.v1.Prefix.site:type_name -> diode.v1.Site
	9,  // 17: diode.v1.Prefix.tags:type_name -> diode.v1.Tag
	9,  // 18: diode.v1.Role.tags:type_name -> diode.v1.Tag
	9,  // 19: diode.v1.Site.tags:type_name -> diode.v1.Tag
	8,  // 20: diode.v1.Entity.site:type_name -> diode.v1.Site
	5,  // 21: diode.v1.Entity.platform:type_name -> diode.v1.Platform
	4,  // 22: diode.v1.Entity.manufacturer:type_name -> diode.v1.Manufacturer
	0,  // 23: diode.v1.Entity.device:type_name -> diode.v1.Device
	7,  // 24: diode.v1.Entity.device_role:type_name -> diode.v1.Role
	3,  // 25: diode.v1.Entity.device_type:type_name -> diode.v1.DeviceType
	1,  // 26: diode.v1.Entity.interface:type_name -> diode.v1.Interface
	2,  // 27: diode.v1.Entity.ip_address:type_name -> diode.v1.IPAddress
	6,  // 28: diode.v1.Entity.prefix:type_name -> diode.v1.Prefix
	13, // 29: diode.v1.Entity.timestamp:type_name -> google.protobuf.Timestamp
	10, // 30: diode.v1.IngestRequest.entities:type_name -> diode.v1.Entity
	11, // 31: diode.v1.IngesterService.Ingest:input_type -> diode.v1.IngestRequest
	12, // 32: diode.v1.IngesterService.Ingest:output_type -> diode.v1.IngestResponse
	32, // [32:33] is the sub-list for method output_type
	31, // [31:32] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_diode_v1_ingester_proto_init() }
func file_diode_v1_ingester_proto_init() {
	if File_diode_v1_ingester_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_diode_v1_ingester_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_ingester_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Interface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_ingester_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_ingester_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_ingester_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Manufacturer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_ingester_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_ingester_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_ingester_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_ingester_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Site); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_ingester_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_ingester_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_ingester_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diode_v1_ingester_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_diode_v1_ingester_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_diode_v1_ingester_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_diode_v1_ingester_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*IPAddress_Interface)(nil),
	}
	file_diode_v1_ingester_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_diode_v1_ingester_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_diode_v1_ingester_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_diode_v1_ingester_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_diode_v1_ingester_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_diode_v1_ingester_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_diode_v1_ingester_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Entity_Site)(nil),
		(*Entity_Platform)(nil),
		(*Entity_Manufacturer)(nil),
		(*Entity_Device)(nil),
		(*Entity_DeviceRole)(nil),
		(*Entity_DeviceType)(nil),
		(*Entity_Interface)(nil),
		(*Entity_IpAddress)(nil),
		(*Entity_Prefix)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diode_v1_ingester_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_diode_v1_ingester_proto_goTypes,
		DependencyIndexes: file_diode_v1_ingester_proto_depIdxs,
		MessageInfos:      file_diode_v1_ingester_proto_msgTypes,
	}.Build()
	File_diode_v1_ingester_proto = out.File
	file_diode_v1_ingester_proto_rawDesc = nil
	file_diode_v1_ingester_proto_goTypes = nil
	file_diode_v1_ingester_proto_depIdxs = nil
}
