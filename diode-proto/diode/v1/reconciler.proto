syntax = "proto3";

package diode.v1;

import "diode/v1/ingester.proto";
import "validate/validate.proto";

option go_package = "github.com/netboxlabs/diode/diode-server/gen/diode/v1/reconcilerpb";

// An ingestion data source
message IngestionDataSource {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  string api_key = 2 [(validate.rules).string = {
    min_len: 40
    max_len: 40
  }];
}

// The request to retrieve ingestion data sources
message RetrieveIngestionDataSourcesRequest {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  string sdk_name = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  string sdk_version = 3 [(validate.rules).string = {pattern: "^(\\d)+\\.(\\d)+\\.(\\d)+$"}];
}

// The response from the retrieve ingestion data sources request
message RetrieveIngestionDataSourcesResponse {
  repeated IngestionDataSource ingestion_data_sources = 1;
}

// IngestionError represents an error occurring while processing an ingestion entity
message IngestionError {
  message Details {
    message Error {
      string error = 1; //key value pair of the error
      string change_id = 2;
    }
    string change_set_id = 1;
    string result = 2;
    repeated Error errors = 3;
  }
  string message = 1;
  int32 code = 2;
  Details details = 3;
}

enum State {
  UNSPECIFIED = 0;
  NEW = 1;
  RECONCILED = 2;
  FAILED = 3;
  NO_CHANGES = 4;
}

// Ingestion metrics
message IngestionMetrics {
  int32 total = 1;
  int32 new = 2;
  int32 reconciled = 3;
  int32 failed = 4;
  int32 no_changes = 5;
}

// A change set
message ChangeSet {
  string id = 1; // A change set ID
  string data = 2; // An arbitrary JSON object representing the change set
}

// An ingestion log
message IngestionLog {
  string id = 1;
  string data_type = 2;
  State state = 3;
  string request_id = 4;
  int64 ingestion_ts = 5;
  string producer_app_name = 6;
  string producer_app_version = 7;
  string sdk_name = 8;
  string sdk_version = 9;
  diode.v1.Entity entity = 10;
  IngestionError error = 11;
  ChangeSet change_set = 12;
}

// The request to retrieve ingestion logs
message RetrieveIngestionLogsRequest {
  optional int32 page_size = 1; // Number of logs per page, default is 100
  optional State state = 2; // Optional filter by state field
  string data_type = 3; // Optional filter by data type field
  string request_id = 4; // Optional filter by request ID
  int64 ingestion_ts_start = 5; // Optional start of ingestion timestamp range
  int64 ingestion_ts_end = 6; // Optional end of ingestion timestamp range
  string page_token = 7; // Token to fetch the next page of results
  bool only_metrics = 8; // Flag to return only the ingestion metrics
}

// The response from the retrieve ingestion logs request
message RetrieveIngestionLogsResponse {
  repeated IngestionLog logs = 1; // List of ingestion logs
  IngestionMetrics metrics = 2; // ingestion metrics
  string next_page_token = 3; // Token for the next page of results, if any
}

// Reconciler service API
service ReconcilerService {
  // Retrieves ingestion data sources
  rpc RetrieveIngestionDataSources(RetrieveIngestionDataSourcesRequest) returns (RetrieveIngestionDataSourcesResponse) {}
  // Retrieves ingestion logs
  rpc RetrieveIngestionLogs(RetrieveIngestionLogsRequest) returns (RetrieveIngestionLogsResponse);
}
