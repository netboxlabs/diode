syntax = "proto3";

package diode.v1;

import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/netboxlabs/diode-sdk-go/diode/v1/diodepb";

// A device
message Device {
  string name = 1 [(validate.rules).string = {max_len: 64}];
  optional string device_fqdn = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  DeviceType device_type = 3;
  Role role = 4;
  Platform platform = 5;
  optional string serial = 6 [(validate.rules).string = {max_len: 50}];
  Site site = 7;
  optional string asset_tag = 8 [(validate.rules).string = {max_len: 200}];
  string status = 9 [(validate.rules).string = {
    in: [
      "offline",
      "active",
      "planned",
      "staged",
      "failed",
      "inventory",
      "decommissioning"
    ]
  }];
  optional string description = 10 [(validate.rules).string = {max_len: 200}];
  optional string comments = 11;
  repeated Tag tags = 12;
  IPAddress primary_ip4 = 13;
  IPAddress primary_ip6 = 14;
}

// An interface
message Interface {
  Device device = 1 [(validate.rules).any.required = true];
  string name = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 64
  }];
  optional string label = 3 [(validate.rules).string = {
    min_len: 1
    max_len: 64
  }];
  string type = 4 [(validate.rules).string = {
    in: [
      "virtual",
      "bridge",
      "lag",
      "100base-fx",
      "100base-lfx",
      "100base-tx",
      "100base-t1",
      "1000base-t",
      "1000base-x-gbic",
      "1000base-x-sfp",
      "2.5gbase-t",
      "5gbase-t",
      "10gbase-t",
      "10gbase-cx4",
      "10gbase-x-sfpp",
      "10gbase-x-xfp",
      "10gbase-x-xenpak",
      "10gbase-x-x2",
      "25gbase-x-sfp28",
      "50gbase-x-sfp56",
      "40gbase-x-qsfpp",
      "50gbase-x-sfp28",
      "100gbase-x-cfp",
      "100gbase-x-cfp2",
      "100gbase-x-cfp4",
      "100gbase-x-cxp",
      "100gbase-x-cpak",
      "100gbase-x-dsfp",
      "100gbase-x-sfpdd",
      "100gbase-x-qsfp28",
      "100gbase-x-qsfpdd",
      "200gbase-x-cfp2",
      "200gbase-x-qsfp56",
      "200gbase-x-qsfpdd",
      "400gbase-x-cfp2",
      "400gbase-x-qsfp112",
      "400gbase-x-qsfpdd",
      "400gbase-x-osfp",
      "400gbase-x-osfp-rhs",
      "400gbase-x-cdfp",
      "400gbase-x-cfp8",
      "800gbase-x-qsfpdd",
      "800gbase-x-osfp",
      "1000base-kx",
      "10gbase-kr",
      "10gbase-kx4",
      "25gbase-kr",
      "40gbase-kr4",
      "50gbase-kr",
      "100gbase-kp4",
      "100gbase-kr2",
      "100gbase-kr4",
      "ieee802.11a",
      "ieee802.11g",
      "ieee802.11n",
      "ieee802.11ac",
      "ieee802.11ad",
      "ieee802.11ax",
      "ieee802.11ay",
      "ieee802.15.1",
      "other-wireless",
      "gsm",
      "cdma",
      "lte",
      "sonet-oc3",
      "sonet-oc12",
      "sonet-oc48",
      "sonet-oc192",
      "sonet-oc768",
      "sonet-oc1920",
      "sonet-oc3840",
      "1gfc-sfp",
      "2gfc-sfp",
      "4gfc-sfp",
      "8gfc-sfpp",
      "16gfc-sfpp",
      "32gfc-sfp28",
      "64gfc-qsfpp",
      "128gfc-qsfp28",
      "infiniband-sdr",
      "infiniband-ddr",
      "infiniband-qdr",
      "infiniband-fdr10",
      "infiniband-fdr",
      "infiniband-edr",
      "infiniband-hdr",
      "infiniband-ndr",
      "infiniband-xdr",
      "t1",
      "e1",
      "t3",
      "e3",
      "xdsl",
      "docsis",
      "gpon",
      "xg-pon",
      "xgs-pon",
      "ng-pon2",
      "epon",
      "10g-epon",
      "cisco-stackwise",
      "cisco-stackwise-plus",
      "cisco-flexstack",
      "cisco-flexstack-plus",
      "cisco-stackwise-80",
      "cisco-stackwise-160",
      "cisco-stackwise-320",
      "cisco-stackwise-480",
      "cisco-stackwise-1t",
      "juniper-vcp",
      "extreme-summitstack",
      "extreme-summitstack-128",
      "extreme-summitstack-256",
      "extreme-summitstack-512",
      "other"
    ]
  }];
  optional bool enabled = 5;
  optional int32 mtu = 6 [(validate.rules).int32 = {
    gte: 1
    lte: 65536
  }];
  optional string mac_address = 7;
  optional int32 speed = 8 [(validate.rules).int32 = {gte: 0}];
  optional string wwn = 9;
  optional bool mgmt_only = 10;
  optional string description = 11 [(validate.rules).string = {max_len: 200}];
  optional bool mark_connected = 12;
  string mode = 13 [(validate.rules).string = {
    in: [
      "access",
      "tagged",
      "tagged-all"
    ]
  }];
  repeated Tag tags = 14;
}

//A Cluster
message Cluster {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 100
  }];
  ClusterType type = 2;
  ClusterGroup group = 3;
  Site site = 4;
  string status = 5 [(validate.rules).string = {
    in: [
      "offline",
      "active",
      "planned",
      "staged",
      "failed",
      "decommissioning"
    ]
  }];
  optional string description = 6 [(validate.rules).string = {max_len: 200}];
  repeated Tag tags = 7;
}

//A Cluster Type
message ClusterType {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 100
  }];
  string slug = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 100
    pattern: "^[-a-zA-Z0-9_]+$"
  }];
  optional string description = 3 [(validate.rules).string = {max_len: 200}];
  repeated Tag tags = 4;
}

//A Cluster Group
message ClusterGroup {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 100
  }];
  string slug = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 100
    pattern: "^[-a-zA-Z0-9_]+$"
  }];
  optional string description = 3 [(validate.rules).string = {max_len: 200}];
  repeated Tag tags = 4;
}

//A Virtual Machine
message VirtualMachine {
  string name = 1 [(validate.rules).string = {max_len: 64}];
  string status = 2 [(validate.rules).string = {
    in: [
      "offline",
      "active",
      "planned",
      "staged",
      "failed",
      "decommissioning"
    ]
  }];
  Site site = 3;
  Cluster cluster = 4;
  Role role = 5;
  Device device = 6;
  Platform platform = 7;
  IPAddress primary_ip4 = 8;
  IPAddress primary_ip6 = 9;
  optional int32 vcpus = 10 [(validate.rules).int32 = {gte: 0}];
  optional int32 memory = 11 [(validate.rules).int32 = {gte: 0}];
  optional int32 disk = 12 [(validate.rules).int32 = {gte: 0}];
  optional string description = 13 [(validate.rules).string = {max_len: 200}];
  optional string comments = 14;
  repeated Tag tags = 15;
}

//A Virtual Machine Interface
message VMInterface {
  VirtualMachine virtual_machine = 1 [(validate.rules).any.required = true];
  string name = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 64
  }];
  optional bool enabled = 3;
  optional int32 mtu = 4 [(validate.rules).int32 = {
    gte: 1
    lte: 65536
  }];
  optional string mac_address = 5;
  optional string description = 6 [(validate.rules).string = {max_len: 200}];
  repeated Tag tags = 7;
}

//A Virtual Disk
message VirtualDisk {
  VirtualMachine virtual_machine = 1 [(validate.rules).any.required = true];
  string name = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 100
  }];
  int32 size = 3 [(validate.rules).int32 = {gte: 0}];
  optional string description = 4 [(validate.rules).string = {max_len: 200}];
  repeated Tag tags = 5;
}

// An IP address.
message IPAddress {
  string address = 1 [(validate.rules).string.ip = true];
  oneof assigned_object {
    Interface interface = 2;
  }
  string status = 3 [(validate.rules).string = {
    in: [
      "active",
      "reserved",
      "deprecated",
      "dhcp",
      "slaac"
    ]
  }];
  string role = 4 [(validate.rules).string = {
    in: [
      "loopback",
      "secondary",
      "anycast",
      "vip",
      "vrrp",
      "hsrp",
      "glbp",
      "carp"
    ]
  }];
  optional string dns_name = 5 [(validate.rules).string = {
    max_len: 255
    pattern: "^([0-9A-Za-z_-]+|\\*)(\\.[0-9A-Za-z_-]+)*\\.?$"
  }];
  optional string description = 6 [(validate.rules).string = {max_len: 200}];
  optional string comments = 7;
  repeated Tag tags = 8;
}

// A device type
message DeviceType {
  string model = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 100
  }];
  string slug = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 100
    pattern: "^[-a-zA-Z0-9_]+$"
  }];
  Manufacturer manufacturer = 3;
  optional string description = 4 [(validate.rules).string = {max_len: 200}];
  optional string comments = 5;
  optional string part_number = 6 [(validate.rules).string = {max_len: 50}];
  repeated Tag tags = 7;
}

// A manufacturer
message Manufacturer {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 100
  }];
  string slug = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 100
    pattern: "^[-a-zA-Z0-9_]+$"
  }];
  optional string description = 3 [(validate.rules).string = {max_len: 200}];
  repeated Tag tags = 4;
}

// A platform
message Platform {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 100
  }];
  string slug = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 100
    pattern: "^[-a-zA-Z0-9_]+$"
  }];
  Manufacturer manufacturer = 3;
  optional string description = 4 [(validate.rules).string = {max_len: 200}];
  repeated Tag tags = 5;
}

// An IPAM prefix.
message Prefix {
  string prefix = 1 [(validate.rules).string.ip = true];
  Site site = 2;
  string status = 3 [(validate.rules).string = {
    in: [
      "active",
      "container",
      "reserved",
      "deprecated"
    ]
  }];
  optional bool is_pool = 4;
  optional bool mark_utilized = 5;
  optional string description = 6 [(validate.rules).string = {max_len: 200}];
  optional string comments = 7;
  repeated Tag tags = 8;
}

// A role
message Role {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 100
  }];
  string slug = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 100
    pattern: "^[-a-zA-Z0-9_]+$"
  }];
  string color = 3 [(validate.rules).string = {
    min_len: 6
    max_len: 6
    pattern: "^[0-9a-f]{6}$"
  }];
  optional string description = 4 [(validate.rules).string = {max_len: 200}];
  repeated Tag tags = 5;
}

// A site
message Site {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 100
  }];
  string slug = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 100
    pattern: "^[-a-zA-Z0-9_]+$"
  }];
  string status = 3 [(validate.rules).string = {
    in: [
      "planned",
      "staging",
      "active",
      "decommissioning",
      "retired"
    ]
  }];
  optional string facility = 4 [(validate.rules).string = {max_len: 50}];
  optional string time_zone = 5;
  optional string description = 6 [(validate.rules).string = {max_len: 200}];
  optional string comments = 7;
  repeated Tag tags = 8;
}

// A tag
message Tag {
  string name = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 100
  }];
  string slug = 2 [(validate.rules).string = {
    min_len: 1
    max_len: 100
    pattern: "^[-a-zA-Z0-9_]+$"
  }];
  string color = 3 [(validate.rules).string = {
    min_len: 6
    max_len: 6
    pattern: "^[0-9a-f]{6}$"
  }];
}

// An ingest entity wrapper
message Entity {
  oneof entity {
    Site site = 1;
    Platform platform = 2;
    Manufacturer manufacturer = 3;
    Device device = 4;
    Role device_role = 5;
    DeviceType device_type = 6;
    Interface interface = 7;
    IPAddress ip_address = 9;
    Prefix prefix = 10;
    ClusterGroup cluster_group = 11;
    ClusterType cluster_type = 12;
    Cluster cluster = 13;
    VirtualMachine virtual_machine = 14;
    VMInterface vminterface = 15;
    VirtualDisk virtual_disk = 16;
  }

  // The timestamp of the data discovery at source
  google.protobuf.Timestamp timestamp = 8 [
    (validate.rules).timestamp.required = true,
    (validate.rules).timestamp.lt_now = true
  ];
}

// The request to ingest the data
message IngestRequest {
  string stream = 1 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  repeated Entity entities = 2 [(validate.rules).repeated = {
    min_items: 1
    max_items: 1000
  }];

  string id = 3 [(validate.rules).string.uuid = true];
  string producer_app_name = 4 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  string producer_app_version = 5 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  string sdk_name = 6 [(validate.rules).string = {
    min_len: 1
    max_len: 255
  }];
  string sdk_version = 7 [(validate.rules).string = {pattern: "^(\\d)+\\.(\\d)+\\.(\\d)+$"}];
}

// The response from the ingest request
message IngestResponse {
  repeated string errors = 1;
}

// Ingestion API
service IngesterService {
  // Ingests data into the system
  rpc Ingest(IngestRequest) returns (IngestResponse) {}
}
